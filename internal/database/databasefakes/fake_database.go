// Code generated by counterfeiter. DO NOT EDIT.
package databasefakes

import (
	"context"
	"sync"

	"github.com/lukewhrit/spacebin/internal/database"
)

type FakeDatabase struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	CreateDocumentStub        func(context.Context, string, string) error
	createDocumentMutex       sync.RWMutex
	createDocumentArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	createDocumentReturns struct {
		result1 error
	}
	createDocumentReturnsOnCall map[int]struct {
		result1 error
	}
	GetDocumentStub        func(context.Context, string) (database.Document, error)
	getDocumentMutex       sync.RWMutex
	getDocumentArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getDocumentReturns struct {
		result1 database.Document
		result2 error
	}
	getDocumentReturnsOnCall map[int]struct {
		result1 database.Document
		result2 error
	}
	MigrateStub        func(context.Context) error
	migrateMutex       sync.RWMutex
	migrateArgsForCall []struct {
		arg1 context.Context
	}
	migrateReturns struct {
		result1 error
	}
	migrateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDatabase) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDatabase) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeDatabase) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeDatabase) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) CreateDocument(arg1 context.Context, arg2 string, arg3 string) error {
	fake.createDocumentMutex.Lock()
	ret, specificReturn := fake.createDocumentReturnsOnCall[len(fake.createDocumentArgsForCall)]
	fake.createDocumentArgsForCall = append(fake.createDocumentArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CreateDocumentStub
	fakeReturns := fake.createDocumentReturns
	fake.recordInvocation("CreateDocument", []interface{}{arg1, arg2, arg3})
	fake.createDocumentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDatabase) CreateDocumentCallCount() int {
	fake.createDocumentMutex.RLock()
	defer fake.createDocumentMutex.RUnlock()
	return len(fake.createDocumentArgsForCall)
}

func (fake *FakeDatabase) CreateDocumentCalls(stub func(context.Context, string, string) error) {
	fake.createDocumentMutex.Lock()
	defer fake.createDocumentMutex.Unlock()
	fake.CreateDocumentStub = stub
}

func (fake *FakeDatabase) CreateDocumentArgsForCall(i int) (context.Context, string, string) {
	fake.createDocumentMutex.RLock()
	defer fake.createDocumentMutex.RUnlock()
	argsForCall := fake.createDocumentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeDatabase) CreateDocumentReturns(result1 error) {
	fake.createDocumentMutex.Lock()
	defer fake.createDocumentMutex.Unlock()
	fake.CreateDocumentStub = nil
	fake.createDocumentReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) CreateDocumentReturnsOnCall(i int, result1 error) {
	fake.createDocumentMutex.Lock()
	defer fake.createDocumentMutex.Unlock()
	fake.CreateDocumentStub = nil
	if fake.createDocumentReturnsOnCall == nil {
		fake.createDocumentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createDocumentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) GetDocument(arg1 context.Context, arg2 string) (database.Document, error) {
	fake.getDocumentMutex.Lock()
	ret, specificReturn := fake.getDocumentReturnsOnCall[len(fake.getDocumentArgsForCall)]
	fake.getDocumentArgsForCall = append(fake.getDocumentArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetDocumentStub
	fakeReturns := fake.getDocumentReturns
	fake.recordInvocation("GetDocument", []interface{}{arg1, arg2})
	fake.getDocumentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDatabase) GetDocumentCallCount() int {
	fake.getDocumentMutex.RLock()
	defer fake.getDocumentMutex.RUnlock()
	return len(fake.getDocumentArgsForCall)
}

func (fake *FakeDatabase) GetDocumentCalls(stub func(context.Context, string) (database.Document, error)) {
	fake.getDocumentMutex.Lock()
	defer fake.getDocumentMutex.Unlock()
	fake.GetDocumentStub = stub
}

func (fake *FakeDatabase) GetDocumentArgsForCall(i int) (context.Context, string) {
	fake.getDocumentMutex.RLock()
	defer fake.getDocumentMutex.RUnlock()
	argsForCall := fake.getDocumentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDatabase) GetDocumentReturns(result1 database.Document, result2 error) {
	fake.getDocumentMutex.Lock()
	defer fake.getDocumentMutex.Unlock()
	fake.GetDocumentStub = nil
	fake.getDocumentReturns = struct {
		result1 database.Document
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabase) GetDocumentReturnsOnCall(i int, result1 database.Document, result2 error) {
	fake.getDocumentMutex.Lock()
	defer fake.getDocumentMutex.Unlock()
	fake.GetDocumentStub = nil
	if fake.getDocumentReturnsOnCall == nil {
		fake.getDocumentReturnsOnCall = make(map[int]struct {
			result1 database.Document
			result2 error
		})
	}
	fake.getDocumentReturnsOnCall[i] = struct {
		result1 database.Document
		result2 error
	}{result1, result2}
}

func (fake *FakeDatabase) Migrate(arg1 context.Context) error {
	fake.migrateMutex.Lock()
	ret, specificReturn := fake.migrateReturnsOnCall[len(fake.migrateArgsForCall)]
	fake.migrateArgsForCall = append(fake.migrateArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.MigrateStub
	fakeReturns := fake.migrateReturns
	fake.recordInvocation("Migrate", []interface{}{arg1})
	fake.migrateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeDatabase) MigrateCallCount() int {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return len(fake.migrateArgsForCall)
}

func (fake *FakeDatabase) MigrateCalls(stub func(context.Context) error) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = stub
}

func (fake *FakeDatabase) MigrateArgsForCall(i int) context.Context {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	argsForCall := fake.migrateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDatabase) MigrateReturns(result1 error) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = nil
	fake.migrateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) MigrateReturnsOnCall(i int, result1 error) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = nil
	if fake.migrateReturnsOnCall == nil {
		fake.migrateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.migrateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDatabase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.createDocumentMutex.RLock()
	defer fake.createDocumentMutex.RUnlock()
	fake.getDocumentMutex.RLock()
	defer fake.getDocumentMutex.RUnlock()
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDatabase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ database.Database = new(FakeDatabase)
